// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id Int @id @default(autoincrement())
  name String
  lastName String
  email String @unique
  role Role
  password String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  templates Template[]
  comments Comment[]
  completedTemplates CompletedTemplate[]
  likedTemplates Template[] @relation("TemplateLikes")
  @@index([email])
}

enum Role {
  ADMIN 
  USER
}

model Template {
  id Int @id @default(autoincrement())
  name String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin Admin @relation(fields: [adminId], references: [id])
  adminId Int
  questions Question[]
  completedTemplates CompletedTemplate[]
  isPublic Boolean @default(true)
  comments    Comment[]
  likes Int @default(0)
  likedBy Admin[] @relation("TemplateLikes") 
  @@index([name])
}

model Question {
  id Int @id @default(autoincrement())
  question String
  template Template @relation(fields: [templateId], references: [id])
  templateId Int
  type QuestionType
  options String[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers Answer[]
}

enum QuestionType  {
  TEXT
  TEXTAREA
  NUMBER
  CHECKBOX
}

model Answer {
  id Int @id @default(autoincrement())
  answer String
  question Question @relation(fields: [questionId], references: [id])
  questionId Int
  completedTemplate CompletedTemplate @relation(fields: [completedTemplateId], references: [id])
  completedTemplateId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompletedTemplate {
  id Int @id @default(autoincrement())
  template Template @relation(fields: [templateId], references: [id])
  templateId Int
  admin Admin @relation(fields: [adminId], references: [id])
  adminId Int
  answers Answer[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id Int @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  template Template @relation(fields: [templateId], references: [id])
  templateId Int
  author Admin @relation(fields: [authorId], references: [id])
  authorId Int 
}
